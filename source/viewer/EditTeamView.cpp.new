#define DEBUG 1

#ifndef _APP_FILE_INFO_H
#include <AppFileInfo.h>
#endif
#ifndef _APPLICATION_H
#include <Application.h>
#endif
#ifndef _BOX_H
#include <Box.h>
#endif
#ifndef _BUTTON_H
#include <Button.h>
#endif
#ifndef _COLOR_CONTROL_H
#include <ColorControl.h>
#endif
#ifndef _DEBUG_H
#include <Debug.h>
#endif
//#ifndef _ERRORS_H
//#include <Errors.h>
//#endif
#ifndef _FILE_H
#include <File.h>
#endif
#ifndef _FONT_H
#include <Font.h>
#endif
#ifndef _MENU_FIELD_H
#include <MenuField.h>
#endif
#ifndef _MENU_ITEM_H
#include <MenuItem.h>
#endif
#ifndef _MESSAGE_H
#include <Message.h>
#endif
#ifndef _OUTLINE_LIST_VIEW_H
#include <OutlineListView.h>
#endif
#ifndef _POINT_H
#include <Point.h>
#endif
#ifndef _POP_UP_MENU_H
#include <PopUpMenu.h>
#endif
#ifndef _ROSTER_H
#include <Roster.h>
#endif
#ifndef _SCROLL_VIEW_H
#include <ScrollView.h>
#endif
#ifndef _STDIO_H
#include <stdio.h>
#endif
#ifndef _RECT_H
#include <Rect.h>
#endif
#ifndef _REGION_H
#include <Region.h>
#endif
#ifndef _SCROLL_VIEW_H
#include <ScrollView.h>
#endif
#ifndef _STRING_VIEW_H
#include <StringView.h>
#endif
#ifndef _STDIO_H_
#include <stdio.h>
#endif
#ifndef _STRING_H_
#include <string.h>
#endif
#ifndef _TEXTVIEW_H
#include <TextView.h>
#endif
#ifndef _VIEW_H
#include <View.h>
#endif
#ifndef _WINDOW_H
#include <Window.h>
#endif

#include "Clue.h"
#include "constants.h"
#include "Slider.h"
#include "TeamItem.h"
#include "BetterScrollView.h"
#include "ColumnListView.h"
#include "CLVColumn.h"
#include "PropertyItem.h"
#include "Utility.h"
#include "EditTeamView.h"
#include "PreferenceItem.h"
//#include "CreditsView.h"
#include "constants.h"

extern BMessage g_Settings;


/***************************************************************
***************************************************************/
EditTeamView :: EditTeamView
(
	BRect frame
	,	BMessage* message
)
	:	EditView(frame, message, "EditTeamView", B_FOLLOW_ALL_SIDES)
	,	m_slider(NULL)
	,	m_bsv(NULL)
	,	m_ColumnListView(NULL)
	,	m_TI(NULL)
	,	m_OK(NULL)
	,	m_CurCat(CC_GENERAL)
	,	m_menufld(NULL)
	,	m_popupmenu(NULL)
{
	SetViewColor(CLR_BACKGROUND);

}


/***************************************************************
***************************************************************/
EditTeamView :: ~EditTeamView
(
	void
)
{
}


/***************************************************************
***************************************************************/
void
EditTeamView :: MessageReceived
(
	BMessage* msg
)
{
	switch (msg->what) {
		case B_OBSERVER_NOTICE_CHANGE: {
				uint32 change(0);
				msg->FindInt32(B_OBSERVE_WHAT_CHANGE, (int32*) &change);
				switch (change) {
					case MSG_SETTINGS_CHANGED: {
						}
						break;
				}
			}
			break;
		default:
			BView::MessageReceived(msg);
	}
}


/***************************************************************
***************************************************************/
void
EditTeamView :: AllAttached(void)
{
	EditView::AllAttached();
	BWindow* pwnd(Window());
	if (pwnd)
		((BHandler*)pwnd)->StartWatching((BHandler*) this, MSG_SETTINGS_CHANGED);
}


/******************************************************************************************************
*******************************************************************************************************/
void
EditTeamView :: AttachedToWindow
(
	void
)
{
	EditView::AttachedToWindow();
}


/******************************************************************************************************
*******************************************************************************************************/
void
EditTeamView :: DetachedFromWindow
(
	void
)
{
	EditView::DetachedFromWindow();
	BWindow* pwnd(Window());
	if (pwnd)
		((BHandler*)pwnd)->StopWatching((BHandler*) this, MSG_SETTINGS_CHANGED);
}


/******************************************************************************************************
*******************************************************************************************************/
void
EditTeamView :: Draw
(
	BRect updateRect
)
{
	EditView::Draw(updateRect);
	BRect rc(m_view->Frame());
	rc.InsetBy(-1.0f, -1.0f);
	StrokeRect(rc);
}


/***************************************************************
***************************************************************/
bool
EditTeamView :: Save
(
	void
)
{
	PRINT(("EditColorView::Save\n"));
	m_Message->MakeEmpty();
	rgb_color colorpref = m_ColorControl->ValueAsColor();
	colorpref.alpha = 255;
	m_Message->AddData("value", B_RGB_COLOR_TYPE, &colorpref, sizeof(rgb_color));
	m_Message->PrintToStream();
	PRINT(("   color: red=%i, green=%i, blue=%i\n", m_color.red, m_color.green, m_color.blue));
	return true;
}

bool
EditTeamView :: PopulateData
(
	BMessage* message
)
{
	bool retval(false);
	rgb_color* pColor(NULL);
	ssize_t numBytes(0);

	PRINT(("\n\nEditColorView\n"));
	message->PrintToStream();
	if (message->FindData("value", B_RGB_COLOR_TYPE, (const void**) &pColor, &numBytes) == B_OK) {
		if (numBytes == sizeof(rgb_color)) {
			memcpy(&m_color, pColor, numBytes);
			PRINT(("   EVC: color: red=%i, green=%i, blue=%i\n", m_color.red, m_color.green, m_color.blue));
			retval = true;
		}
	}

	return retval;
}


/***************************************************************
***************************************************************/
EditTeamView*
EditTeamView :: Create
(
	BRect frame
	,	BMessage* message
)
{
	EditTeamView* pObject(new EditTeamView(frame, message));

	if (pObject) {
		if (false == pObject->PopulateData(message)) {
			delete pObject;
			pObject = NULL;
		}
	}

	return pObject;
}








